<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ian Muscat</title>
 <link href="https://www.ianmuscat.com/atom.xml" rel="self"/>
 <link href="https://www.ianmuscat.com/"/>
 <updated>2015-10-15T11:39:26+02:00</updated>
 <id>https://www.ianmuscat.com</id>
 <author>
   <name>Ian Muscat</name>
   <email>ianmuscat@gmail.com</email>
 </author>

 
 <entry>
   <title>'Share' – Simple, no-frills sharing buttons</title>
   <link href="https://www.ianmuscat.com/2015/08/04/share-simple-no-frills-sharing-buttons/"/>
   <updated>2015-08-04T00:00:00+02:00</updated>
   <id>https://www.ianmuscat.com/2015/08/04/share-simple-no-frills-sharing-buttons</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/img/2015-08-04-share-simple-no-frills-sharing-buttons/cover.jpg&quot; alt=&quot;&#39;Share&#39; - Simple, no-frills sharing buttons&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t understand why every sharing plugin or widget I’ve come across needs to be so complicated, load a ton of JavaScript and/or just be downright ugly.&lt;/p&gt;

&lt;p&gt;I decided to make my own super simple, no-frills sharing buttons.&lt;/p&gt;

&lt;p&gt;The icons are SVGs, so that avoids having another couple round-trips to the server and has the added benefit of playing nice with retina or other hi-DPI displays since they’re vectors. No server-side voodoo, all done in JavaScript. Since to me only Facebook, Twitter and (perhaps) Google+ are the only relevant social networks around, I’ve just limited it to the big three, but you can easily extend it to fit your requirements.&lt;/p&gt;

&lt;p&gt;If you want to use this, just make sure to swap out your site’s &lt;em&gt;postamble&lt;/em&gt; (that’s the bit at the end) of your site’s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag and substitute your Twitter username. You can also run it through a minifier to compress it further if you like.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ianmuscat/46958b29ba38b9630b6f.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Installing Google Firing Range</title>
   <link href="https://www.ianmuscat.com/2015/07/25/installing-google-firing-range/"/>
   <updated>2015-07-25T00:00:00+02:00</updated>
   <id>https://www.ianmuscat.com/2015/07/25/installing-google-firing-range</id>
   <content type="html">&lt;p&gt;Google Firing Range is a “test bed for web application security scanners, providing synthetic, wide coverage for an array of vulnerabilities”. It’s &lt;a href=&quot;https://github.com/google/firing-range&quot;&gt;available on GitHub&lt;/a&gt; and also has a &lt;a href=&quot;https://public-firing-range.appspot.com/&quot;&gt;publicly available instance&lt;/a&gt; on Google AppEngine.&lt;/p&gt;

&lt;p&gt;The testbed itself is great, but the project’s &lt;code&gt;README&lt;/code&gt; mention’s nothing on how to install it, nor could I find any instructions on other sites. So just in case it will prove useful to you, here’s a short guide and a &lt;a href=&quot;https://gist.github.com/ianmuscat/0ae912cb06b078b9f7c9&quot;&gt;shell script&lt;/a&gt; (I’ve only tested it on Ubuntu 14.04 LTS)&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;Before you start, you need to install the Java JRE/JDK. If you need help getting that installed, head over to &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get&quot;&gt;this neat article&lt;/a&gt; by Digital Ocean.&lt;/p&gt;

&lt;p&gt;You’ll also need to install Apache Ant. Apache Ant is a tool that is used for automating software builds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install ant
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;download-firing-range-and-its-depencancies&quot;&gt;Download Firing Range and its depencancies&lt;/h2&gt;
&lt;p&gt;Once you have the Java JRE/JDK installed, clone the Git repository to a directory on your computer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/firing-range.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Firing Range is meant to run on Google App Engine, you’ll need to download and unzip the &lt;a href=&quot;https://cloud.google.com/appengine/downloads&quot;&gt;Google App Engine SDK for Java&lt;/a&gt; in order to run it.&lt;/p&gt;

&lt;p&gt;Next you’ll need to set the path to the SDK in &lt;code&gt;build.xml&lt;/code&gt;. Open up the file in your favourite editor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nano firing-range/build.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the following line and change the location of the SDK to where ever you placed it on your computer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&quot;appengine.sdk&quot; location=&quot;../..&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll need to compile the project using Apache Ant. This will create a &lt;code&gt;war&lt;/code&gt; directory which will contain the compiled application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ant compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Now we just need to run the built-in server bundled with the Google App Engine SDK.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;appengine-java-sdk-1.9.23/bindev_appserver.sh firing-range/war
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also choose to change the address and port the server binds to. In the below example I’ve changed the binging of the web server to bind on all interfaces on port 8080.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;appengine-java-sdk-1.9.23/bindev_appserver.sh --address=0.0.0.0 --port=8080 firing-range/war
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;shell-script&quot;&gt;Shell script&lt;/h2&gt;
&lt;p&gt;Here’s a shell script to do this automatically (tested on Ubuntu 14.04 LTS)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ianmuscat/0ae912cb06b078b9f7c9.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Supercharging John the Ripper with OpenMPI</title>
   <link href="https://www.ianmuscat.com/2013/05/16/supercharging-john-the-ripper-with-openmpi/"/>
   <updated>2013-05-16T00:00:00+02:00</updated>
   <id>https://www.ianmuscat.com/2013/05/16/supercharging-john-the-ripper-with-openmpi</id>
   <content type="html">&lt;p&gt;&lt;em&gt;John the Ripper&lt;/em&gt; (&lt;em&gt;John&lt;/em&gt; for short) is an open source, multi-platform, best-of-breed password cracking tool – primarily, because it’s fast, versatile and highly customisable. John not only supports a wide variety of hashes, but also is able to accept a variety of customised rules and parameters.&lt;/p&gt;

&lt;p&gt;Unfortunately however, John doesn’t leverage the multicore CPU you have in your machine, since it is, by default, singlethreaded. As such, if you own a CPU that supports multithreading, John will probably end up run slower since it would only be working with an approximate maximum of half of the total CPU capacity of a single core.&lt;/p&gt;

&lt;p&gt;Fortunately, John can be made to run on multiple cores with multiple threads with OpenMPI. Yes, I am aware that this subject has been covered before, however, since I haven’t found anything online about setting this up from start to finish on a Mac running OS X 10.8 (Mountain Lion) I’m going to cover just that.&lt;span id=&quot;more-29&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;message&quot;&gt;
	&lt;em&gt;Note&lt;/em&gt; &amp;mdash; You should be able to follow pretty much the same procedure in Linux. It’s actually easier to set-up in Linux since the GCC compiler and OpenMPI might be installed already (they are if you are using BackTrack or Kali).
&lt;/div&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;We’ll need to install Apple’s Xcode, download the latest versions of both OpenMPI and John, enable a few flags, and compile OpenMPI and John from source. After we compile John, we’ll also be taking a brief look at another configuration we can use to enable John to compete for CPU time an not only make use of idle CPU cycles. Let’s jump right in!&lt;/p&gt;

&lt;h2 id=&quot;step-1-downloading-xcode&quot;&gt;Step 1 – Downloading Xcode&lt;/h2&gt;

&lt;p&gt;We’ll start off by downloading Apple’s Xcode. We’ll need Xcode in order to be able to install the GCC compiler out of the box. I’m sure you can install GCC without installing Xcode (it’s probably not that difficult) but for simplicity’s sake, we’ll be going with Xcode.&lt;/p&gt;

&lt;p&gt;In order to download Xcode, you’ll want to head over to the Mac App Store. On older versions of OS X, you can probably find a DMG file somewhere and install Xcode from there (you might run into some incompatibilities if you do this on older Macs).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/01-download-xcode.jpg&quot; alt=&quot;Screenshot of downloading Xcode from the App Store&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2--installing-command-line-tools&quot;&gt;Step 2 – Installing Command Line Tools&lt;/h2&gt;

&lt;p&gt;Once Xcode is downloaded and installed, go ahead and start it up. You should be greeted with a splash screen saying ‘Welcome to Xcode’. Navigate to &lt;em&gt;Xcode &amp;gt; Preferences&lt;/em&gt; in the top menu, or the usual &lt;em&gt;⌘&lt;/em&gt;, for shortcut fans. In the &lt;em&gt;Preferences&lt;/em&gt; window, navigate to the &lt;em&gt;Downloads&lt;/em&gt; tab. There you should be able to download and install the &lt;em&gt;Command Line Tools&lt;/em&gt; from within Xcode. Go ahead and click &lt;em&gt;Install&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/02-download-command-line-tools.jpg&quot; alt=&quot;Download Command Line Tools from within Xcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you try to run the &lt;code&gt;make&lt;/code&gt; command before we install Xcode and its Developer Command Line Tools you will get a &lt;code&gt;make: command not found&lt;/code&gt; error. The &lt;code&gt;make&lt;/code&gt; command invokes the compiler, and based on the &lt;code&gt;Makefile&lt;/code&gt; (more on this later) the compiler will compile the source code into executable files.&lt;/p&gt;

&lt;h2 id=&quot;step-3--compiling-and-installing-openmpi-from-source&quot;&gt;Step 3 – Compiling and Installing OpenMPI from source&lt;/h2&gt;

&lt;p&gt;Now that we’ve got all the Command Line Tools installed, let’s compile and install OpenMPI. As far as I know you can’t download a binary version of OpenMPI the Mac. Compiling it from source is not too hard anyway. Download the OpenMPI source from &lt;a href=&quot;http://www.open-mpi.org/software&quot; title=&quot;Download OpenMPI&quot;&gt;here&lt;/a&gt; to get started. If you’re confused as to which file to download, go with the first one – it’s the latest version. Place the folder somewhere predictable. I placed it in my home directory and renamed it to &lt;em&gt;openmpi&lt;/em&gt; make things simpler.&lt;/p&gt;

&lt;p&gt;If you haven’t yet fired up your Terminal, now’s the time to do so. &lt;code&gt;cd&lt;/code&gt; into the directory with all the source code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/03-cd-to-open-mpi-source-directory.jpg&quot; alt=&quot;cd to the directory containing the OpenMPI source code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, you’ll need to run &lt;code&gt;./configure --prefix=/usr/local&lt;/code&gt; . This will run a configuration application that will configure OpenMPI before actually compiling it. We’ll be using the &lt;code&gt;/usr/local&lt;/code&gt; folder to host the OpenMPI installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/04-configure-open-mpi.jpg&quot; alt=&quot;Configure Open MPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once OpenMPI is configured, you now need to run the &lt;code&gt;make all&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/05-make-open-mpi.jpg&quot; alt=&quot;Compile OpenMPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Install OpenMPI by running the &lt;code&gt;sudo make install&lt;/code&gt; command. We’ll need &lt;code&gt;sudo&lt;/code&gt; since we need administrative privileges to install applications. You will be prompted for your password, which won’t show up as you type it – that’s okay, just hit the return key when you’re done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/06-install-open-mpi.jpg&quot; alt=&quot;Install OpenMPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! OpenMPI should be successfully installed. You should be able to see new folders in your &lt;code&gt;/usr/local&lt;/code&gt; folder. You can take a look at this directory in your Finder. If you haven’t installed anything except OpenMPI it should look similar to the screenshot hereunder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/07-user-local-directory-openmpi.jpg&quot; alt=&quot;The /usr/local/ directory after OpenMPI installation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4--compiling-and-installing-john-the-ripper-from-source&quot;&gt;Step 4 – Compiling and Installing John the Ripper from source&lt;/h2&gt;

&lt;p&gt;While OpenMPI took a little while to set up, it will be worth wile once we compile John, especially if you’re sporting a fast CPU on your machine!&lt;/p&gt;

&lt;p&gt;Before we start to compile John, you need the &lt;a href=&quot;http://www.openwall.com/john/&quot; title=&quot;John the Ripper download page&quot;&gt;latest &lt;em&gt;Jumbo&lt;/em&gt; package&lt;/a&gt;. A Jumbo package is a &lt;em&gt;community-enhanced package&lt;/em&gt; that implements some of the latest enhancements and tweaks from the John the Ripper community. Make sure you download the &lt;em&gt;UNIX&lt;/em&gt; version and not the Windows version (in this case at least).&lt;/p&gt;

&lt;p&gt;Unpack the archive file in which ever way suits you best. Once again, place the folder somewhere predictable. I placed it in my home directory and renamed it to &lt;em&gt;jtr&lt;/em&gt; make things simpler.&lt;/p&gt;

&lt;p&gt;Before we fire-up the terminal, we need to make some tweaks to the &lt;em&gt;Makefile&lt;/em&gt; in our &lt;em&gt;src&lt;/em&gt; directory (the &lt;em&gt;Makefile&lt;/em&gt; is simply a file that tells the compiler how to build the program). For this we’ll need to have a good text-editor (you can use TextEdit if you like. But this should serve as an excuse to get your hands on a good text editor). If you like to work in the terminal, you can use &lt;em&gt;nano&lt;/em&gt;, &lt;em&gt;vi&lt;/em&gt; and the like. I’m using my favourite – &lt;a href=&quot;http://www.sublimetext.com&quot; title=&quot;Download SublimeText&quot;&gt;SublimeText&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll want to un-comment (remove the ‘#’ symbol at the front of the line) the two lines as follows (line numbers 23 and 24 at the time of writing) to enable OpenMPI in John.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#CC =  mpicc -DHAVE*MPI
#MPIOBJ = john-mpi.o&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/08-edit-makefile-jtr.jpg&quot; alt=&quot;Edit John&#39;s Makefile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are now set to compile John. Simply fire-up a Terminal window and &lt;code&gt;cd&lt;/code&gt; into the directory you placed John’s source and simply run &lt;code&gt;make clean macosx-x86-64&lt;/code&gt; to compile John.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/09-make-jtr.jpg&quot; alt=&quot;Compile John&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5--additional-configuration&quot;&gt;Step 5 – Additional configuration&lt;/h2&gt;

&lt;p&gt;By default, John does not compete for CPU cycles, but makes use of idle CPU cycles. Allowing John to compete for a share of the CPU speeds things up. While you can opt not to do this if you want to run John in the background, it’s recommended if you’re concerned about speed. In order to make changes to this configuration, from the newly compiled &lt;em&gt;run&lt;/em&gt; directory, load &lt;code&gt;john.conf&lt;/code&gt; into your text editor and uncomment the following line (currently line number 20 at the time of writing).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#Idle = N&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2013-05-16-supercharging-john-the-ripper-with-openmpi/10-configure-jtr.jpg&quot; alt=&quot;Configure John&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-6--running-john&quot;&gt;Step 6 – Running John&lt;/h2&gt;

&lt;p&gt;Let’s crack some passwords! First off, you’ll need a password list. If you don’t have one, just hash a few strings of characters using whatever hashing algorithm you like and throw it into a text file. hashes need to be one-per line.&lt;/p&gt;

&lt;p&gt;Simply &lt;code&gt;cd&lt;/code&gt; into the &lt;em&gt;run&lt;/em&gt; directory and start the command with &lt;code&gt;mpirun -np 8&lt;/code&gt;. &lt;em&gt;8&lt;/em&gt;, being the number of cores you want john to run on. You’ll need to append this with the actual command for John. So you can have something similar to the command hereunder, which will run 4 instances of John. Make sure you don’t omit the &lt;code&gt;./&lt;/code&gt; in the command, or otherwise you’ll get an error thrown your way.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mpirun -np 4 ./john --wordlist --rules --format=raw-md5 /Users/Ian/sample-passwords.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;message&quot;&gt;
	&lt;em&gt;Note&lt;/em&gt; &amp;ndash; The example given above is a simple one – always make use of better dictionaries and rules than the defaults John comes bundled with.
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;That ought to wrap things up. I feel obliged to say this – It’s up to you how use password cracking tools, just do so responsibly and ethically.&lt;/p&gt;
</content>
 </entry>
 

</feed>
